package main

import (
	"reflect"
	"testing"
)

func TestGenerator(t *testing.T) {
	for _, tc := range []struct {
		input int
		want  []string
	}{
		{0, []string{""}},
		{1, []string{"()", "[]", "{}"}},
		{2, []string{"(())", "([])", "({})", "()()", "()[]", "(){}", "[()]", "[[]]", "[{}]", "[]()", "[][]", "[]{}", "{()}", "{[]}", "{{}}", "{}()", "{}[]", "{}{}"}},
		{3, []string{"((()))", "(([]))", "(({}))", "(()())", "(()[])", "((){})", "(())()", "(())[]", "(()){}", "([()])", "([[]])", "([{}])", "([]())", "([][])", "([]{})", "([])()", "([])[]", "([]){}", "({()})", "({[]})", "({{}})", "({}())", "({}[])", "({}{})", "({})()", "({})[]", "({}){}", "()(())", "()([])", "()({})", "()()()", "()()[]", "()(){}", "()[()]", "()[[]]", "()[{}]", "()[]()", "()[][]", "()[]{}", "(){()}", "(){[]}", "(){{}}", "(){}()", "(){}[]", "(){}{}", "[(())]", "[([])]", "[({})]", "[()()]", "[()[]]", "[(){}]", "[()]()", "[()][]", "[()]{}", "[[()]]", "[[[]]]", "[[{}]]", "[[]()]", "[[][]]", "[[]{}]", "[[]]()", "[[]][]", "[[]]{}", "[{()}]", "[{[]}]", "[{{}}]", "[{}()]", "[{}[]]", "[{}{}]", "[{}]()", "[{}][]", "[{}]{}", "[](())", "[]([])", "[]({})", "[]()()", "[]()[]", "[](){}", "[][()]", "[][[]]", "[][{}]", "[][]()", "[][][]", "[][]{}", "[]{()}", "[]{[]}", "[]{{}}", "[]{}()", "[]{}[]", "[]{}{}", "{(())}", "{([])}", "{({})}", "{()()}", "{()[]}", "{(){}}", "{()}()", "{()}[]", "{()}{}", "{[()]}", "{[[]]}", "{[{}]}", "{[]()}", "{[][]}", "{[]{}}", "{[]}()", "{[]}[]", "{[]}{}", "{{()}}", "{{[]}}", "{{{}}}", "{{}()}", "{{}[]}", "{{}{}}", "{{}}()", "{{}}[]", "{{}}{}", "{}(())", "{}([])", "{}({})", "{}()()", "{}()[]", "{}(){}", "{}[()]", "{}[[]]", "{}[{}]", "{}[]()", "{}[][]", "{}[]{}", "{}{()}", "{}{[]}", "{}{{}}", "{}{}()", "{}{}[]", "{}{}{}"}},
	} {
		var got []string
		GenParentheses(tc.input, func(s string) {
			got = append(got, s)
		})
		if !reflect.DeepEqual(tc.want, got) {
			t.Errorf("GenParentheses(%v) = %v, want = %v", tc.input, got, tc.want)
		}
	}
}
